% is_prime(N - number)
is_prime(2).
is_prime(3).
is_prime(N):-
    integer(N),
    N > 3,
    N mod 2 =\= 0,
    \+ has_factor(N,3).
​
has_factor(NN,F):-
    NN mod F =:= 0.
has_factor(NN,F):-
    F*F < NN,
    NextF is F + 2,
    has_factor(NN,NextF).
​
% A)
% double_primes(L - list, R - result list)
% flow model (i, o)
double_primes([], []).
double_primes([H|T], [H,H|T2]) :-
    is_prime(H),
    double_primes(T, T2).
double_primes([H|T], [H|T2]) :-
    \+ is_prime(H),
    double_primes(T, T2).
​
% ?- double_primes([1,2,3,4,5,6,7,8], Result).
​
% B)
% double_prime_sublists(L - list, R - result list)
% flow model(i, o)
double_prime_sublists([], []).
double_prime_sublists([X|T], [X|Rest]) :-
    \+ is_list(X),
    double_prime_sublists(T, Rest).
double_prime_sublists([X|T], [NewX|Rest]) :-
    is_list(X),
    double_primes(X, NewX),
    double_prime_sublists(T, Rest).
​
% double_prime_sublists([1, [2, 3], 4, 5, [1, 4, 6], 3, [1, 3, 7, 9, 10], 5], Result).