     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf, fprintf, scanf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 66696C652E74787400          file_name db "file.txt", 0
    21 00000009 612B00                      open_mode db "a+", 0
    22 0000000C 00000000                    file_descriptor dd 0
    23 00000010 00000000                    stop dd 0
    24 00000014 256400                      read_format db "%d", 0
    25 00000017 2564256300                  format db "%d%c", 0
    26 0000001C 0A00000000000000            new_line dd `\n`, 0
    27 00000024 00000000                    read_word dd 0
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32 00000000 68[09000000]                    push open_mode
    33 00000005 68[00000000]                    push file_name
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4*2
    36                                          
    37 00000013 83F800                          cmp eax, 0
    38 00000016 7456                            je .end
    39 00000018 A3[0C000000]                    mov [file_descriptor], eax
    40                                          
    41                                          .read_words
    41          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    42 0000001D 68[24000000]                        push read_word
    43 00000022 68[14000000]                        push read_format
    44 00000027 FF15[00000000]                      call [scanf]
    45 0000002D 83C408                              add esp, 4*2
    46                                              
    47 00000030 A1[24000000]                        mov eax, [read_word]
    48 00000035 3B05[10000000]                      cmp eax, [stop]
    49 0000003B 7431                                je .end
    50                                              
    51 0000003D FF35[1C000000]                      push dword [new_line]
    52 00000043 FF35[24000000]                      push dword [read_word]
    53 00000049 68[17000000]                        push format
    54 0000004E FF35[0C000000]                      push dword [file_descriptor]
    55 00000054 FF15[00000000]                      call [fprintf]
    56 0000005A 83C40C                              add esp, 4*3
    57 0000005D EBBE                             jmp .read_words
    58 0000005F FF35[0C000000]                   push dword [file_descriptor]
    59 00000065 FF15[00000000]                   call [fclose]
    60 0000006B 83C404                           add esp, 4
    61                                              .end:
    62                                          ; exit(0)
    63 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
