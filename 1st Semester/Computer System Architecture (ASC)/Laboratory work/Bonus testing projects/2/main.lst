     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  
    13                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 66696C652E74787400          file_name db "file.txt", 0
    20 00000009 6263646667686A6B6C-         search_characters db "bcdfghjklmnpqrstvwxyz", 0
    20 00000012 6D6E70717273747677-
    20 0000001B 78797A00           
    21                                      characters equ $ - search_characters
    22 0000001F 7200                        read_mode db "r", 0
    23 00000021 7700                        write_mode db "w", 0
    24 00000023 00000000                    file_stream dd 0
    25 00000027 00000000                    bytes_read dd 0
    26 0000002B 00000000                    found dd 0
    27 0000002F 256400                      format db "%d", 0
    28 00000032 <res 000007D0>              read_content resb 2000
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; ...
    33 00000000 68[1F000000]                    push read_mode
    34 00000005 68[00000000]                    push file_name
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 4*2
    37                                          
    38 00000013 83F800                          cmp eax, 0
    39 00000016 7450                            je .end
    40 00000018 A3[23000000]                    mov [file_stream], eax
    41                                          .main_program:
    42 0000001D FF35[23000000]                      push dword [file_stream]
    43 00000023 6A64                                push dword 100
    44 00000025 6A01                                push dword 1
    45 00000027 68[32000000]                        push read_content
    46 0000002C FF15[00000000]                      call [fread]
    47 00000032 83C410                              add esp, 4*4
    48                                              
    49 00000035 0105[27000000]                      add dword[bytes_read], eax
    50 0000003B 83F800                              cmp eax, 0  
    51 0000003E 75DD                                jne .main_program
    52                                              
    53 00000040 8B0D[27000000]                  mov ecx, [bytes_read]
    54 00000046 BE[32000000]                    mov esi , read_content
    55                                          .loop:
    56 0000004B 51                                  push ecx
    57 0000004C B916000000                          mov ecx, characters
    58 00000051 AC                                  lodsb
    59 00000052 BF[09000000]                        mov edi, search_characters
    60                                              .search:             
    61 00000057 AE                                      scasb
    62 00000058 7509                                    jne .not_equal
    63                                                  ; they are equal
    64 0000005A 8305[2B000000]01                        add dword[found], 1
    65 00000061 EB02                                    jmp .end_loop
    66                                                  .not_equal:
    67 00000063 E2F2                                loop .search
    68                                              .end_loop
    68          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    69 00000065 59                                  pop ecx
    70 00000066 E2E3                            loop .loop
    71                                          .end:
    72 00000068 FF35[23000000]                  push dword [file_stream]
    73 0000006E FF15[00000000]                  call [fclose]
    74 00000074 83C404                          add esp, 4
    75                                          
    76 00000077 FF35[2B000000]                  push dword [found]
    77 0000007D 68[2F000000]                    push format
    78 00000082 FF15[00000000]                  call [printf]
    79                                          
    80                                          ; exit(0)
    81 00000088 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    82 0000008A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
