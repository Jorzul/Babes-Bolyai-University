     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  
    13                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 66696C652E74787400          file_name db "file.txt", 0
    20 00000009 7200                        read_mode db "r", 0
    21 0000000B 7700                        write_mode db "w", 0
    22 0000000D 00000000                    file_stream dd 0
    23 00000011 00000000                    bytes_read dd 0
    24 00000015 00000000                    highet_freq_char dd 0
    25 00000019 00000000                    char_freq dd 0
    26 0000001D 25633A20256400              format db "%c: %d", 0
    27 00000024 <res 000007D0>              read_content resb 2000
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32 00000000 68[09000000]                    push read_mode
    33 00000005 68[00000000]                    push file_name
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4*2
    36                                          
    37 00000013 83F800                          cmp eax, 0
    38 00000016 747A                            je .end
    39 00000018 A3[0D000000]                    mov [file_stream], eax
    40                                          .main_program:
    41 0000001D FF35[0D000000]                      push dword [file_stream]
    42 00000023 6A64                                push dword 100
    43 00000025 6A01                                push dword 1
    44 00000027 68[24000000]                        push read_content
    45 0000002C FF15[00000000]                      call [fread]
    46 00000032 83C410                              add esp, 4*4
    47                                              
    48 00000035 0105[11000000]                      add dword[bytes_read], eax
    49 0000003B 83F800                              cmp eax, 0  
    50 0000003E 75DD                                jne .main_program
    51                                              
    52                                          ; go through each digit, count the appearance and put a zero where you passed through it, digit stays in al, count in ebx
    53 00000040 BE[24000000]                    mov esi, read_content
    54 00000045 8B0D[11000000]                  mov ecx, [bytes_read]
    55                                          .loop:
    56 0000004B 51                                  push ecx
    57                                              
    58 0000004C AC                                  lodsb
    59 0000004D BB00000000                          mov ebx, 0
    60 00000052 BF[24000000]                        mov edi, read_content
    61 00000057 8B0D[11000000]                      mov ecx, [bytes_read]
    62                                              .count:
    63 0000005D AE                                      scasb
    64 0000005E 7503                                    jne .dont_count
    65                                                  
    66 00000060 83C301                                  add ebx, 1
    67                                                  
    68                                                  .dont_count:
    69 00000063 E2F8                                loop .count
    70 00000065 391D[19000000]                      cmp dword [char_freq], ebx
    71 0000006B 7F0B                                jg .greater
    72                                              ; change the char and the frequency
    73 0000006D A2[15000000]                        mov [highet_freq_char], al
    74 00000072 891D[19000000]                      mov [char_freq], ebx
    75                                              .greater:
    76 00000078 59                                  pop ecx
    77 00000079 E2D0                            loop .loop
    78 0000007B FF35[19000000]                  push dword [char_freq]
    79 00000081 FF35[15000000]                  push dword [highet_freq_char]
    80 00000087 68[1D000000]                    push format
    81 0000008C FF15[00000000]                  call [printf]
    82                                          .end:
    83                                          ; exit(0)
    84 00000092 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    85 00000094 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
