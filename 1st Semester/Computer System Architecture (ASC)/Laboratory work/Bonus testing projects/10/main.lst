     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf, scanf, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import scanf msvcrt.dll
    15                                      ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    16                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20                                      ; ...
    21 00000000 <res 00000004>              file_descriptor resd 1
    22 00000004 772B00                      open_mode db "w+", 0
    23 00000007 <res 0000001F>              file_name resb 31
    24 00000026 <res 00000079>              text resb 121
    25 0000009F 257300                      read_format db "%s", 0
    26                                      
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 68[07000000]                    push file_name
    32 00000005 68[9F000000]                    push read_format
    33 0000000A FF15[00000000]                  call [scanf]
    34 00000010 83C408                          add esp, 4*2
    35                                          
    36 00000013 68[26000000]                    push text
    37 00000018 68[9F000000]                    push read_format
    38 0000001D FF15[00000000]                  call [scanf]
    39 00000023 83C408                          add esp, 4*2
    40                                          
    41 00000026 68[04000000]                    push open_mode
    42 0000002B 68[07000000]                    push file_name
    43 00000030 FF15[00000000]                  call [fopen]
    44 00000036 83C408                          add esp, 4*2
    45 00000039 83F800                          cmp eax, 0
    46 0000003C 742E                            je .end
    47 0000003E A3[00000000]                    mov [file_descriptor], eax
    48                                          
    49 00000043 68[26000000]                    push text
    50 00000048 68[9F000000]                    push read_format
    51 0000004D FF35[00000000]                  push dword[ file_descriptor]
    52 00000053 FF15[00000000]                  call [fprintf]
    53 00000059 83C40C                          add esp, 4*3
    54                                          
    55 0000005C 68[07000000]                    push file_name
    56 00000061 68[9F000000]                    push read_format
    57 00000066 FF15[00000000]                  call [printf]
    58                                          
    59                                          .end:
    60                                          
    61                                          ; exit(0)
    62 0000006C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 0000006E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
