     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fread, printf                ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                      ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 00000000                    x_count dd 0
    19 00000004 00000000                    y_count dd 0
    20 00000008 66696C652E74787400          file_name db "file.txt", 0
    21 00000011 00000000                    file_descriptor dd 0
    22 00000015 7200                        open_mode db "r", 0
    23 00000017 00000000                    bytes_read dd 0
    24 0000001B <res 000007D0>              read_text resb 2000
    25 000007EB 25633A2025642C2025-         print_format db "%c: %d, %c: %d", 0
    25 000007F4 633A20256400       
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 68[15000000]                    push open_mode
    31 00000005 68[08000000]                    push file_name
    32 0000000A FF15[00000000]                  call [fopen]
    33 00000010 83C408                          add esp, 4*2
    34                                          
    35 00000013 83F800                          cmp eax, 0
    36 00000016 7472                            je .end_program
    37 00000018 A3[11000000]                    mov [file_descriptor], eax
    38                                          
    39                                          .read_file_loop:
    40 0000001D FF35[11000000]                      push dword [file_descriptor]
    41 00000023 6A64                                push dword 100
    42 00000025 6A01                                push dword 1
    43 00000027 68[1B000000]                        push read_text
    44 0000002C FF15[00000000]                      call [fread]
    45 00000032 83C410                              add esp, 4*4
    46                                              
    47 00000035 0105[17000000]                      add [bytes_read], eax
    48 0000003B 83F800                              cmp eax, 0
    49 0000003E 75DD                                jne .read_file_loop
    50                                              
    51 00000040 BE[1B000000]                    mov esi, read_text
    52 00000045 8B0D[17000000]                  mov ecx, [bytes_read]
    53                                          
    54                                          .compare_loop:
    55 0000004B AC                                  lodsb
    56 0000004C 3C78                                cmp al, "x"
    57 0000004E 7507                                jne .compare_y
    58                                              ; is x
    59 00000050 8305[00000000]01                    add dword [x_count], 1
    60                                              .compare_y:
    61 00000057 3C79                                cmp al, "y"
    62 00000059 7507                                jne .end_compare
    63                                              ;is y
    64 0000005B 8305[04000000]01                    add dword[y_count], 1
    65                                              .end_compare:
    66 00000062 E2E7                            loop .compare_loop
    67 00000064 B878000000                      mov eax, "x"
    68 00000069 BB79000000                      mov ebx, "y"
    69 0000006E FF35[00000000]                  push dword[ x_count]
    70 00000074 50                              push eax
    71 00000075 FF35[04000000]                  push dword [y_count]
    72 0000007B 53                              push ebx
    73 0000007C 68[EB070000]                    push print_format
    74 00000081 FF15[00000000]                  call [printf]
    75 00000087 83C414                          add esp, 4*5
    76                                          ; exit(0)
    77                                          .end_program:
    78 0000008A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 0000008C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
