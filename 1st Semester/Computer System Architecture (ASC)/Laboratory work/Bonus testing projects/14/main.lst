     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 66696C652E74787400          file_name db "file.txt", 0
    20 00000009 616461666E666E4645-         text db "adafnfnFESNFNInnuBkvYBjvHBHb457667Fgu67t6456!@$%^&&^%$#FW4%^$#$%Y%GF^%UY$", 0
    20 00000012 534E464E496E6E7542-
    20 0000001B 6B7659426A76484248-
    20 00000024 623435373636374667-
    20 0000002D 753637743634353621-
    20 00000036 4024255E26265E2524-
    20 0000003F 23465734255E242324-
    20 00000048 25592547465E255559-
    20 00000051 2400               
    21                                      text_length equ $ - text
    22 00000053 41                          a_code db "A"
    23 00000054 20                          difference db "a"-"A"
    24 00000055 5A                          z_code db "Z"
    25 00000056 772B00                      open_mode db "w+", 0
    26 00000059 00000000                    file_descriptor dd 0
    27 0000005D 257300                      write_format db "%s", 0
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32                                          
    33 00000000 BE[09000000]                    mov esi, text
    34 00000005 B94A000000                      mov ecx, text_length
    35                                          .loop:
    36                                          
    37 0000000A 51                              push ecx
    38                                          
    39 0000000B AC                                  lodsb
    40 0000000C 3A05[53000000]                      cmp al, [a_code]
    41 00000012 7211                                jb .end_loop
    42 00000014 3A05[55000000]                      cmp al, [z_code]
    43 0000001A 7709                                ja .end_loop
    44                                              
    45                                              ; lower case letters get here in al
    46 0000001C 0205[54000000]                      add al, [difference]
    47 00000022 8846FF                              mov [esi-1], al
    48                                              
    49                                          .end_loop:
    50 00000025 59                              pop ecx
    51 00000026 E2E2                            loop .loop
    52                                          
    53 00000028 68[56000000]                    push open_mode
    54 0000002D 68[00000000]                    push file_name
    55 00000032 FF15[00000000]                  call [fopen]
    56 00000038 83C408                          add esp, 4*2
    57                                          
    58 0000003B 83F800                          cmp eax, 0
    59 0000003E 7431                            je .end
    60 00000040 A3[59000000]                    mov [file_descriptor], eax
    61 00000045 68[09000000]                    push text
    62 0000004A 68[5D000000]                    push write_format
    63 0000004F FF35[59000000]                  push dword [file_descriptor]
    64 00000055 FF15[00000000]                  call [fprintf]
    65 0000005B 83C40C                          add esp, 4*3
    66                                          
    67 0000005E 68[09000000]                    push text
    68 00000063 68[5D000000]                    push write_format
    69 00000068 FF15[00000000]                  call [printf]
    70 0000006E 83C408                          add esp, 4*2
    71                                          
    72                                          .end:
    73                                          ; exit(0)
    74 00000071 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000073 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
