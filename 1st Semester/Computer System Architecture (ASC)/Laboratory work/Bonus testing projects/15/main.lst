     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 66696C652E74787400          file_name db "file.txt", 0
    20 00000009 616461666E666E4645-         text db "adafnfnFESNFNInnuBkvYBjvHBHb457667Fgu67t6456!@$%^&&^%$#FW4%^$#$%Y%GF^%UY$", 0
    20 00000012 534E464E496E6E7542-
    20 0000001B 6B7659426A76484248-
    20 00000024 623435373636374667-
    20 0000002D 753637743634353621-
    20 00000036 4024255E26265E2524-
    20 0000003F 23465734255E242324-
    20 00000048 25592547465E255559-
    20 00000051 2400               
    21                                      text_length equ $ - text
    22 00000053 21                          a_code db "!"
    23 00000054 3F                          z_code db "?"
    24 00000055 772B00                      open_mode db "w+", 0
    25 00000058 00000000                    file_descriptor dd 0
    26 0000005C 257300                      write_format db "%s", 0
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31                                          
    32 00000000 BE[09000000]                    mov esi, text
    33 00000005 B94A000000                      mov ecx, text_length
    34                                          .loop:
    35                                          
    36 0000000A 51                              push ecx
    37                                          
    38 0000000B AC                                  lodsb
    39 0000000C 3A05[53000000]                      cmp al, [a_code]
    40 00000012 720D                                jb .end_loop
    41 00000014 3A05[54000000]                      cmp al, [z_code]
    42 0000001A 7705                                ja .end_loop
    43                                              
    44                                              ; lower case letters get here in al
    45 0000001C B058                                mov al, "X"
    46 0000001E 8846FF                              mov [esi-1], al
    47                                              
    48                                          .end_loop:
    49 00000021 59                              pop ecx
    50 00000022 E2E6                            loop .loop
    51                                          
    52 00000024 68[55000000]                    push open_mode
    53 00000029 68[00000000]                    push file_name
    54 0000002E FF15[00000000]                  call [fopen]
    55 00000034 83C408                          add esp, 4*2
    56                                          
    57 00000037 83F800                          cmp eax, 0
    58 0000003A 7431                            je .end
    59 0000003C A3[58000000]                    mov [file_descriptor], eax
    60 00000041 68[09000000]                    push text
    61 00000046 68[5C000000]                    push write_format
    62 0000004B FF35[58000000]                  push dword [file_descriptor]
    63 00000051 FF15[00000000]                  call [fprintf]
    64 00000057 83C40C                          add esp, 4*3
    65                                          
    66 0000005A 68[09000000]                    push text
    67 0000005F 68[5C000000]                    push write_format
    68 00000064 FF15[00000000]                  call [printf]
    69 0000006A 83C408                          add esp, 4*2
    70                                          
    71                                          .end:
    72                                          ; exit(0)
    73 0000006D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    74 0000006F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
