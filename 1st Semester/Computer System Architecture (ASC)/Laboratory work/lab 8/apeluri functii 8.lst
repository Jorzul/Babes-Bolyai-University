     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 32000000                    a dd 50
    16 00000004 0000                        b dw 0
    17 00000006 623D00                  	message db "b=", 0 
    18 00000009 256400                      format db "%d", 0
    19 0000000C 00000000                    result dd 0
    20 00000010 61202B20612F62203D-         result_format db "a + a/b = %d", 0
    20 00000019 20256400           
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 68[06000000]                    push dword message
    26 00000005 FF15[00000000]                  call [printf]
    27 0000000B 83C404                          add esp, 4*1   ; prints 'b=' so that we know what variable to read
    28                                          
    29 0000000E 68[04000000]                    push dword b
    30 00000013 68[09000000]                    push dword format
    31 00000018 FF15[00000000]                  call [scanf]   ; read the number
    32 0000001E 83C408                          add esp, 4*2
    33                                          
    34 00000021 A1[00000000]                    mov eax, [a]
    35 00000026 50                              push eax
    36 00000027 6658                            pop ax
    37 00000029 665A                            pop dx    ; dx:ax = a (so that we can do a/b later)
    38                                          
    39 0000002B 668B1D[04000000]                mov bx, [b]
    40 00000032 66F7FB                          idiv bx        ; ax = a/b
    41                                          
    42 00000035 98                              cwde
    43 00000036 8B1D[00000000]                  mov ebx, [a]
    44 0000003C 01C3                            add ebx, eax
    45 0000003E 891D[0C000000]                  mov [result], ebx
    46                                          
    47 00000044 FF35[0C000000]                  push dword [result]
    48 0000004A 68[10000000]                    push dword result_format
    49 0000004F FF15[00000000]                  call [printf]
    50 00000055 83C408                          add esp, 4*2
    51                                          
    52                                      
    53                                          ; exit(0)
    54 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
