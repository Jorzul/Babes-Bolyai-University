     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf   ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                             ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 66696C652E74787400          file_name db "file.txt", 0
    18 00000009 7200                        read_mode db "r", 0
    19 0000000B 41                          upper_case_A db "A"
    20 0000000C 5A                          upper_case_Z db "Z"
    21 0000000D 7700                        write_mode db "w", 0
    22 0000000F 00000000                    file_stream dd 0
    23 00000013 00000000                    bytes_read dd 0
    24 00000017 00000000                    highet_freq_char dd 0
    25 0000001B 00000000                    char_freq dd 0
    26 0000001F 25633A20256400              format db "%c: %d", 0
    27 00000026 <res 000007D0>              read_content resb 2000
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32 00000000 68[09000000]                    push read_mode
    33 00000005 68[00000000]                    push file_name
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4*2   ; we read each letter
    36                                          
    37 00000013 83F800                          cmp eax, 0
    38 00000016 0F848A000000                    je .end
    39 0000001C A3[0F000000]                    mov [file_stream], eax
    40                                          
    41                                          .main_program:
    42                                          
    43 00000021 FF35[0F000000]                      push dword [file_stream]
    44 00000027 6A64                                push dword 100
    45 00000029 6A01                                push dword 1
    46 0000002B 68[26000000]                        push read_content
    47 00000030 FF15[00000000]                      call [fread]
    48 00000036 83C410                              add esp, 4*4
    49                                              
    50 00000039 0105[13000000]                      add dword[bytes_read], eax
    51 0000003F 83F800                              cmp eax, 0  
    52 00000042 75DD                                jne .main_program
    53                                              
    54                                          ; go through each digit, count the appearance and put a zero where you passed through it, digit stays in al, count in ebx
    55 00000044 BE[26000000]                    mov esi, read_content
    56 00000049 8B0D[13000000]                  mov ecx, [bytes_read]
    57                                          
    58                                          .loop:
    59                                              
    60 0000004F 51                                  push ecx
    61 00000050 AC                                  lodsb
    62                                              
    63 00000051 3A05[0B000000]                      cmp al, [upper_case_A]
    64 00000057 7233                                jb .end_loop
    65                                              
    66 00000059 3A05[0C000000]                      cmp al, [upper_case_Z]
    67 0000005F 7F2B                                jg .end_loop              ; if digit is between A or Z then we count it and put a zero
    68                                              
    69 00000061 BB00000000                          mov ebx, 0
    70 00000066 BF[26000000]                        mov edi, read_content
    71 0000006B 8B0D[13000000]                      mov ecx, [bytes_read]
    72                                              
    73                                              .count:
    74 00000071 AE                                      scasb
    75 00000072 7503                                    jne .dont_count
    76                                                  
    77 00000074 83C301                                  add ebx, 1
    78                                                  
    79                                                  .dont_count:
    80 00000077 E2F8                                loop .count
    81                                              
    82 00000079 391D[1B000000]                      cmp dword [char_freq], ebx
    83 0000007F 7F0B                                jg .end_loop
    84                                              
    85 00000081 A2[17000000]                        mov [highet_freq_char], al
    86 00000086 891D[1B000000]                      mov [char_freq], ebx         ; change the char and the frequency
    87                                              
    88                                              .end_loop:
    89 0000008C 59                                  pop ecx
    90                                              
    91 0000008D E2C0                            loop .loop
    92                                          
    93 0000008F FF35[1B000000]                  push dword [char_freq]
    94 00000095 FF35[17000000]                  push dword [highet_freq_char]
    95 0000009B 68[1F000000]                    push format
    96 000000A0 FF15[00000000]                  call [printf]
    97                                          
    98                                          .end:
    99                                      
   100                                          ; exit(0)
   101 000000A6 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   102 000000A8 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
